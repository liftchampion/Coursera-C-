#include "test_runner.h"

#include <vector>
#include <iostream>
#include <stdexcept>

using namespace std;

// Реализуйте здесь шаблонный класс Table

template<class T>
class Deque {
public:
	Deque() {
		vector<T> empty(0);
		v_back = empty;
		v_front = empty;
	}
	bool Empty() const {
		return v_back.empty() && v_front.empty();
	}
	size_t Size() const {
		return v_back.size() + v_front.size();
	}
	void PushFront(T new_item) {
		v_front.push_back(new_item);
	}
	void PushBack(T new_item) {
		v_back.push_back(new_item);
	}
	T& Front() {
		return v_front.back();
	}
	const T& Front() const {
		return v_front.back();
	}
	T& Back() {
		return v_back.back();
	}
	const T& Back() const {
		return v_back.back();
	}
	T& operator[] (size_t index) {
		if (index <= v_front.size()) {
			return v_front[v_front.size() - 1 - index];
		}
		else {
			return v_back[index - v_front.size()];
		}
	}
	const T& operator[](size_t index) const {
		if (index < v_front.size()) {
			return v_front[v_front.size() - 1 - index];
		}
		else {
			return v_back[index - v_front.size()];
		}
	}
	T& At(size_t index) {
		if (index >= Size()) {
			throw out_of_range("last element is " + to_string(Size() - 1));
		}
		return operator[](index);
	}
	const T& At(size_t index) const{
		if (index >= Size()) {
			throw out_of_range("last element is " + to_string(Size() - 1));
		}
		return operator[](index);
	}
	vector<T> GetFront() const{
		return v_front;
	}
	vector<T> GetBack() const{
		return v_back;
	}
private:
	vector<T> v_back;
	vector<T> v_front;
};

template<class T>
ostream& operator<< (ostream& os, const Deque<T>& d) {
	vector<T> f = d.GetFront();
	vector<T> b = d.GetBack();
	for (size_t i = f.size() - 1; i >= 0; i--) {
		os << f[i] << " ";
	}
	os << endl;
	for (size_t i = 0; i < b.size(); i++) {
		os << b[i] << " ";
	}
	return os;
}


void TestDeque() {
	Deque<int> d;
	d.PushBack(1);
	ASSERT_EQUAL(d.Back(), 1);
	d.PushFront(2);
	cout << d;
	ASSERT_EQUAL(d.Front(), 2);
	ASSERT_EQUAL(d[0], 2);
	ASSERT_EQUAL(d[1], 1);
}


int main() {
  TestRunner tr;
  RUN_TEST(tr, TestDeque);
  return 0;
}
