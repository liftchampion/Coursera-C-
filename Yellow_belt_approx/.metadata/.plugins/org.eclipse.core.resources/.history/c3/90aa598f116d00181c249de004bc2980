#include <fstream>
#include <iostream>
#include <string>
#include <map>
using namespace std;

/*
 * insert 8
insert 3
insert 10
insert 1
insert 6
insert 14
insert 4
insert 7
insert 13
print 0

insert 5
insert 10
insert 6
insert 0
insert 1
insert 15
insert 5
print 0
 *
 *
 */

class Node {
public:
	Node() {
		value = 0;
		active = false;
		parent = NULL;
	}
	void Insert(const int& new_value, map<char, Node>* new_parent = NULL) {
		if (!active) {
			value = new_value;
			active = true;
			parent = new_parent;
		}
		else {
			if (new_value < value) {
				children['L'].Insert(new_value, new_parent);
			}
			else {
				children['R'].Insert(new_value, new_parent);
			}
		}
	}
	void Delete(const int& del_value) {
		cerr << "deleting" << endl;
		if (del_value == value) {
			cerr << "	good node" << endl;
			if (children.size() == 0) {
				cerr << "	empty node" << endl;
				if (parent == NULL) {
					cerr << "	top node" << endl;
					active = false;
				}
			}
		}
	}
	void Print() {
		if (active) {
			cout << value << " children are: ( L< ";
			children['L'].Print();
			cout << "> R<";
			children['R'].Print();
			cout << "> ) ";
		}
	}
private:
	bool active;
	int value;
	map<char, Node> children;
	map<char, Node>* parent;
};

int main() {
	Node tree;
	string command;
	int value;
	while (cin >> command >> value) {
		if (command == "insert") {
			tree.Insert(value);
		}
		if (command == "delete") {
			tree.Delete(value);
		}
		if (command == "exists") {

		}
		if (command == "next") {

		}
		if (command == "prev") {

		}
		if (command == "print") {
			tree.Print();
		}
		else {

		}
	}
	return 0;
}
