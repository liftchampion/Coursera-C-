//#include "test_runner.h"

#include <vector>
#include <utility>
#include <iostream>

using namespace std;

// Реализуйте здесь шаблонный класс Table

template<class T>
class Deque {
public:
	Deque() {

	}
	bool Empty() const {
		return v_back.empty() && v_front.empty();
	}
	size_t Size() const {
		return v_back.size() + v_front.size();
	}
	void PushFront(T new_item) {
		v_front.push_back(new_item);
	}
	void PushBack(T new_item) {
		v_back.push_back(new_item);
	}
private:
	vector<T> v_back;
	vector<T> v_front;
};

/*
void TestTable() {
  Table<int> t(1, 1);
  ASSERT_EQUAL(t.Size().first, 1u);
  ASSERT_EQUAL(t.Size().second, 1u);
  t[0][0] = 42;
  ASSERT_EQUAL(t[0][0], 42);
  t.Resize(3, 4);
  ASSERT_EQUAL(t.Size().first, 3u);
  ASSERT_EQUAL(t.Size().second, 4u);

  Table<int> t2(3,3);
  t2.Resize(5, 5);
  ASSERT_EQUAL(t2[4][4], 0);
  Table<string> t3(3,3);
  t3.Resize(5, 5);
  ASSERT_EQUAL(t3[4][4], "");
  Table<vector<int>> t4(3,3);
  vector<int> empty_v;
  t4.Resize(5, 5);
  ASSERT_EQUAL(t4[4][4], empty_v);
}*/

/*
int main() {
  //TestRunner tr;
  //RUN_TEST(tr, TestTable);
  return 0;
}*/
