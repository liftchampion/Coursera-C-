#include <vector>
#include <iostream>
#include <stack>
using namespace std;

void PrintVector(const vector<int>& v) {
	for (const auto& i : v) {
		cout << i << " ";
	}
}

template <class Iterator>
void PrintIts(Iterator begin, Iterator end) {
	for (auto it = begin; it != end; it++) {
		cout << *it << " ";
	}
	cout << endl;
}


template <class Iterator>
Iterator SetMid(stack<int>& nums, Iterator seq_begin, Iterator seq_end) {
	auto mid_it = seq_begin + (seq_end - 1 - seq_begin) / 2;
	cerr << (seq_end - seq_begin) / 2 << endl;
	*mid_it = nums.top();
	nums.pop();
	return mid_it;
}

template <class Iterator>
void MakeWorst(stack<int>& nums, Iterator seq_begin, Iterator seq_end) {
	cerr << "MakeWorst" << endl;


	if (seq_end - seq_begin < 2) {
		cerr << "small vector" << endl;
		if (seq_begin != seq_end) {
			*seq_begin = nums.top();
			nums.pop();
		}

		return;
	}
	PrintIts(seq_begin, seq_end);

	Iterator mid_it = SetMid(nums, seq_begin, seq_end);
	MakeWorst(nums, seq_begin, mid_it);
	MakeWorst(nums, mid_it, seq_end);
}


int main() {
	int n;
	cin >> n;
	/*stack<int> nums;
	for (int i = 1; i <= n; i++) {
		nums.push(i);
	}
	vector<int> sequence(n);
	PrintIts(sequence.begin(), sequence.end());
	//cerr << sequence.end() - sequence.begin() << endl;
	auto mid = SetMid(nums, sequence.begin(), sequence.end());
	SetMid(nums, sequence.begin(), mid);
	SetMid(nums, mid + 1, sequence.end());
	PrintIts(sequence.begin(), sequence.end());*/

	vector<int> nums(n);
	for (int i = 1; i <= n; i++) {
		nums[i - 1] = i;
	}

	for (int i = 0; i < n; i++) {
		int tmp = nums[i];
		nums[i] = nums[i / 2];
		nums[i / 2] = tmp;
	}
	PrintVector(nums);

	return 0;
}
