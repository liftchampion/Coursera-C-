#include <fstream>
#include <iostream>
#include <string>
#include <map>
using namespace std;



class Node {
public:
	Node() {
		value = 0;
		active = false;
	}
	void Insert(const int& new_value) {
		if (!active) {
			value = new_value;
			active = true;
		}
		else {
			if (new_value < value) {
				children['L'].Insert(new_value);
			}
			else {
				children['R'].Insert(new_value);
			}
		}
	}
	void Print() {
		if (active) {
			cout << value << " children are: ( ";
			children['L'].Print();
			cout << " ";
			children['R'].Print();
			cout << " )" << endl;
		}
	}
private:
	bool active;
	int value;
	map<char, Node> children;
};

int main() {
	Node tree;
	string command;
	int value;
	while (cin >> command >> value) {
		if (command == "insert") {
			tree.Insert(value);
		}
		if (command == "delete") {

		}
		if (command == "exists") {

		}
		if (command == "next") {

		}
		if (command == "prev") {

		}
		if (command == "print") {
			tree.Print();
		}
		else {

		}
	}
	return 0;
}
