#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

void PrintMatrix(const vector<vector<int>>& mat, int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cout << mat[i][j];
		}
		cout << endl;
	}
	cout << n;
}

vector<int> GetNeighbor(const vector<vector<int>>& mat, int i, int j) {
	vector<int> result;
	if (i > 0 && j > 0 && i < mat.size() - 1 && j < mat[i].size() - 1) {
		result.push_back(mat[i-1][j]);
		result.push_back(mat[i][j-1]);
		result.push_back(mat[i+1][j]);
		result.push_back(mat[i][j+1]);
	}
	if (i == 0 && j > 0 && j < mat[i].size() - 1) {
		result.push_back(mat[i][j-1]);
		result.push_back(mat[i+1][j]);
		result.push_back(mat[i][j+1]);
	}
	if (i == mat.size() - 1 && j > 0 && j < mat[i].size() - 1) {
		result.push_back(mat[i][j-1]);
		result.push_back(mat[i-1][j]);
		result.push_back(mat[i][j+1]);
	}
	if (i > 0 && j == 0 && i < mat.size() - 1) {
		result.push_back(mat[i-1][j]);
		result.push_back(mat[i+1][j]);
		result.push_back(mat[i][j+1]);
	}
	if (i > 0 && i < mat.size() - 1 && j == mat[i].size() - 1) {
		result.push_back(mat[i-1][j]);
		result.push_back(mat[i][j-1]);
		result.push_back(mat[i+1][j]);
	}
	if (i == 0 && j == 0) {
		result.push_back(mat[i+1][j]);
		result.push_back(mat[i][j+1]);
	}
	if (i == 0 && j == mat[i].size() - 1) {
		result.push_back(mat[i][j-1]);
		result.push_back(mat[i+1][j]);
	}
	if (j == 0 && i == mat.size() - 1) {
		result.push_back(mat[i-1][j]);
		result.push_back(mat[i][j+1]);
	}
	if (i == mat.size() - 1 && j == mat[i].size() - 1) {
		result.push_back(mat[i-1][j]);
		result.push_back(mat[i][j-1]);
	}
	return result;
}


int GetItem (const vector<vector<int>>& mat, int i, int j) {
	int item = 1;
	if (count(GetNeighbor(mat, i, j).begin(), GetNeighbor(mat, i, j).end(), 2) > 1) {
		item = 2;
	}
	else if (count(GetNeighbor(mat, i, j).begin(), GetNeighbor(mat, i, j).end(), 2) +
			count(GetNeighbor(mat, i, j).begin(), GetNeighbor(mat, i, j).end(), 3) > 0) {
		item = 3;
	}
	else {
		item = 1;
	}
	return item;
}

vector<vector<int>> NewIteration(const vector<vector<int>>& mat, int n, int m,
												vector<vector<int>>& result) {
	vector<vector<int>> new_mat;

	for (int i = 0; i < n; ++i) {
		vector<int> new_str;
		for (int j = 0; j < m; ++j) {
			new_str.push_back(0);
		}
		new_mat.push_back(new_str);
	}

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			int new_item = GetItem(mat, i, j);
			if (new_item != mat[i][j]) {
				++result[i][j];
			}
			new_mat[i][j] = new_item;;
		}
	}
	return new_mat;
}

void Task(vector<vector<int>>& mat, int n, int m, int k) {
	vector<vector<int>> result;
	for (int i = 0; i < n; ++i) {
		vector<int> new_str;
		for (int j = 0; j < m; ++j) {
			new_str.push_back(0);
		}
		result.push_back(new_str);
	}
	cout << "1";
	for (int i = 0; i < k; ++i) {
		mat = NewIteration(mat, n, m, result);
		cout << "2";
	}
	PrintMatrix(mat, n, m);

}

int main() {
	int n;
	int m;
	int k;
	cin >> n >> m >> k;
	cout << n << m << k;
	vector<vector<int>> matrix;
	for (int i = 0; i < n; ++i) {
		vector<int> new_str;
		for (int j = 0; j < m; ++j) {
			int new_element;
			cin >> new_element;
			new_str.push_back(new_element);
		}
		matrix.push_back(new_str);
	}
	cout << "0";
	PrintMatrix(matrix, n, m);
	cout << "1";

	Task(matrix, n, m, k);


	return 0;
}
