#include <vector>
#include <string>
#include <iostream>
#include <map>
using namespace std;



class TreeNode {
public:
	TreeNode () {
		value = '#';
		num_words = 0;
	}
	void AddWord(string& word) {
		//cout << "Adding word " << word << " now letter is " << word[0] << endl;
		value = word[0];
		num_words++;
		word.erase(word.begin());
		if (word.size() > 0) {
			children[word[0]].AddWord(word);
		}
	}
	void Print () const {
		//cout << "Trying to print" << endl;
		cout << value << "(" << num_words << ")" << " ";
		for (const auto& child : children) {
			child.second.Print();
		}
	}
private:
	char value;
	int num_words;
	map<char, TreeNode> children;
};


class Forest {
public:
	void AddWord(string word) {
		//cout << "Adding word " << word << " now letter is " << word[0] << endl;
		trees[word[0]].AddWord(word);
	}
	int CountKeys(const string& word) {

	}
	void Print () const {
		//cout << "Trying to print" << endl;
		for (const auto& tree : trees) {
			tree.second.Print();
		}
		cout << endl;
	}
private:
	map<char, TreeNode> trees;
};




int main() {
	string word = "hello";
	//cin >> word;

	Forest forest;
	int n;
	cin >> n;
	for (int i = 0; i < n; ++i) {
		string word;
		cin >> word;
		forest.AddWord(word);
	}

	cout << endl;
	forest.Print();
	return 0;
}
