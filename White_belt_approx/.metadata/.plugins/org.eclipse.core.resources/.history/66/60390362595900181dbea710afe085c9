/*
 *
 * 5 aaaaa aaaab aaaaa abaaa abaaa
 *
 */


#include <string>
#include <set>
#include <vector>
#include <iostream>
using namespace std;

void PrintV(const vector<string>& v) {
	for (const auto& i : v) {
		cout << i << " ";
	}
}

vector<string> WordToPrefixes (const string& word) {
	vector<string> prefixes;
	string previus_prefix;
	for (int i = 0; i < word.size(); ++i) {
		prefixes.push_back(previus_prefix + word[i]);
		previus_prefix += word[i];
	}
	//PrintV(prefixes);

	return prefixes;
}

/*
 * Раскладываем на буквы
 */

bool CheckAccordance(const string& prefix, const string& word) {
	for (int i = 0; i < prefix.size(); ++i) {
		if (prefix[i] != word[i]) {
			return false;
		}
	}
	return true;
}

int CountAccords(const string& prefix, const set<string>& dict) {
	int accords = 0;
	for (const auto& word : dict) {
		if (word.size() > prefix.size()) {
			if (CheckAccordance(prefix, word)) {
				accords++;
			}
		}
	}
	return accords;
}

int CountKeysForWord(const string& word, const set<string>& dict) {
	/*
	 * Раскладываем слово на префиксы+
	 * Создаю массив префиксов+
	 * Итерируюсь по нему+
	 * 		Когда дохожу до конца массива или однозначного соответсвия слову из dict останавливаюсь+
	 * Возвращаю длину последнего использованного префикса+
	 */
	vector<string> prefixes = WordToPrefixes(word);
	string good_prefix;
	for (const auto& prefix : prefixes) {
		if (CountAccords(prefix, dict) == 1) {
			good_prefix = prefix;
			break;
		}
	}
	return good_prefix.size();
}

int CountAllKeys(const vector<string>& words, set<string>& dict) {
	int num_keys = 0;
	for (const auto& word : words) {
		num_keys += CountKeysForWord(word, dict);
		dict.insert(word);
	}
}


int main() {
	/*
	 * ??? СОЗДАТЬ ДЕРЕВО ???
	 */

	int n;
	cin >> n;
	vector<string> words(n);
	for (auto& i : words) {
		cin >> i;
	}
	PrintV(words);
	set<string> dict;

	/*
	 * Итерируемся по словам
	 * 		Берем слово
	 * 		num_keys += Считаем количество нажатий функцией CountKeysForWord
	 * 		Добавляем слово в dict
	 */

	/*string word;
	cin >> word;
	WordToPrefixes(word);*/
	/*bool broken = false;
	for (int i = 0; i < 10; i++) {
		cout << "i=" << i << "   ";
		for (int j = 0; j < 10; j++) {
			cout << "j=" << j << " ";
			if (i == 5) {
				broken = true;
				break;
			}
		}
		cout << endl;
		if (broken) {
			break;
		}
	}*/

	return 0;
}
