#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <stdexcept>
#include <string>
#include <vector>
#include <utility>

using namespace std;

template <class T>
ostream& operator << (ostream& os, const vector<T>& s) {
  os << "[";
  bool first = true;
  for (const auto& x : s) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << x;
  }
  return os << "]";
}

template <class T>
ostream& operator << (ostream& os, const set<T>& s) {
  os << "<";
  bool first = true;
  for (const auto& x : s) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << x;
  }
  return os << ">";
}

template <class K, class V>
ostream& operator << (ostream& os, const map<K, V>& m) {
  os << "{";
  bool first = true;
  for (const auto& kv : m) {
    if (!first) {
      os << ", ";
    }
    first = false;
    os << "(" << kv.first << " : " << kv.second << ")";
  }
  return os << "}";
}

template <class K, class V>
ostream& operator << (ostream& os, const pair<K, V>& p) {
  os << "(" << p.first << " : " << p.second << ")";

  return os;
}

template<class T, class U>
void AssertEqual(const T& t, const U& u, const string& hint = {}) {
  if (t != u) {
    ostringstream os;
    os << endl << "	Assertion failed: " << endl << "		" << t << " != " << u;
    if (!hint.empty()) {
       os << endl << "		** hint: " << hint << " **";
    }
    throw runtime_error(os.str());
  }
}

void Assert(bool b, const string& hint) {
  AssertEqual(b, true, hint);
}

class TestRunner {
public:
  template <class TestFunc>
  void RunTest(TestFunc func, const string& test_name) {
    try {
      func();
      cerr << test_name << " OK" << endl;
    } catch (exception& e) {
      ++fail_count;
      cerr << test_name << " fail: " << e.what() << endl;
    } catch (...) {
      ++fail_count;
      cerr << "Unknown exception caught" << endl;
    }
  }

  ~TestRunner() {
    if (fail_count > 0) {
    	cerr << endl;
    	cerr << fail_count << " unit tests failed. Terminate" << endl;
    	exit(1);
    }
  }

private:
  int fail_count = 0;
};




class Person {
public:
  void ChangeFirstName(int year, const string& first_name) {
    // добавить факт изменения имени на first_name в год year
  }
  void ChangeLastName(int year, const string& last_name) {
    // добавить факт изменения фамилии на last_name в год year
  }
  string GetFullName(int year) {
	  string str = "Incognito";
	  return str;
    // получить имя и фамилию по состоянию на конец года year
  }
private:
  // приватные поля
};


void TestPerson () {
	{
		Person person;
		AssertEqual(person.GetFullName(1), "Incognito", "empty");
	}
	{
		Person person;
		person.ChangeFirstName(10, "Gleb");
		person.ChangeLastName(12, "Titov");
		AssertEqual(person.GetFullName(9), "Incognito", "too early");
		AssertEqual(person.GetFullName(10), "Gleb with unknown last name", "only name =");
		AssertEqual(person.GetFullName(11), "Gleb with unknown last name", "only name");
		AssertEqual(person.GetFullName(12), "Gleb Titov", "both =");
		AssertEqual(person.GetFullName(13), "Gleb Titov", "both");
	}
	{
		Person person;
		person.ChangeFirstName(12, "Gleb");
		person.ChangeLastName(10, "Titov");
		AssertEqual(person.GetFullName(9), "Incognito", "too early");
		AssertEqual(person.GetFullName(10), "Titov with unknown first name", "only lastname =");
		AssertEqual(person.GetFullName(11), "Titov with unknown first name", "only lastname");
		AssertEqual(person.GetFullName(12), "Gleb Titov", "both =");
		AssertEqual(person.GetFullName(13), "Gleb Titov", "both");
	}

}



void TestAll() {
	// добавьте сюда свои тесты
	TestRunner tr;
	tr.RunTest(TestPerson, "TestPerson");

}

int main() {
  TestAll();

  return 0;
}
