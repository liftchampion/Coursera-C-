#include <vector>
#include <string>
#include <iostream>
#include <map>
using namespace std;



class TreeNode {
public:
	TreeNode () {
		value = '#';
		num_words = 0;
		end_of_word = false;
	}
	void AddWord(string& word) {
		//cout << "Adding word " << word << " now letter is " << word[0] << endl;
		value = word[0];
		if (word.size() > 0) {   	// ??? КАК БЫТЬ С ПОСЛЕДНЕЙ БУКВОЙ СЛОВА??? Hello Hell
			num_words++;
		}

		word.erase(word.begin());
		if (word.size() > 0) {
			children[word[0]].AddWord(word);
		}
		else {
			end_of_word = true;
		}
	}
	void CountKeys (string& word, int& keys_economy) {
		bool new_word = false;
		if (value == '#') {				//Слово новое
			keys_economy = 0;
			new_word = true;
			AddWord(word);
		}
		else {							// Слово старое
			if (num_words > 1) {			//Причём неединственное
				if (word.size() > 0) {			//И это не последний его символ
					char letter = word[0];
					word.erase(word.begin());
					children[letter].CountKeys(word, keys_economy);
				}
				else {							//И это последний его символ
					keys_economy = 0;
				}
			}
			else {							//Причём единственное
				if (word.size() > 1) {			//И это не последний его символ
					if (keys_economy == -1) {		//И это первый узел, где слово стало единственным
						char letter = word[0];
						word.erase(word.begin());
						keys_economy = word.size();
						children[letter].CountKeys(word, keys_economy);
					}
					else {							//И это НЕ первый узел, где слово стало единственным
						char letter = word[0];
						word.erase(word.begin());
						children[letter].CountKeys(word, keys_economy);
					}
				}
				else {							//И это последний его символ
					if (end_of_word == false) {		//И в этом узле нет конца слова (то есть слово всё-таки новое)
						end_of_word = true;
						keys_economy = 0;
					}								// else {}  И в этом узле есть конец слова (то есть слово точно существовало)
				}
			}
		}
	}
	void Print () const {
		//cout << "Trying to print" << endl;
		cout << value << "(" << num_words << ")" << "<" << end_of_word << ">" << " ";
		for (const auto& child : children) {
			child.second.Print();
		}
	}
private:
	char value;
	int num_words;
	bool end_of_word;
	map<char, TreeNode> children;
};


class Forest {
public:
	void AddWord(string word) {
		//cout << "Adding word " << word << " now letter is " << word[0] << endl;
		trees[word[0]].AddWord(word);
	}
	int CountKeys(string& word){
		int word_size = word.size();
		int keys_economy = -1;
		trees[word[0]].CountKeys(word, keys_economy);
		return word_size - keys_economy;
	}
	void Print () const {
		//cout << "Trying to print" << endl;
		for (const auto& tree : trees) {
			tree.second.Print();
		}
		cout << endl;
	}
private:
	map<char, TreeNode> trees;
};




int main() {
	string word = "hello";
	//cin >> word;

	Forest forest;
	int n;
	cin >> n;
	int num_keys = 0;
	for (int i = 0; i < n; ++i) {
		string word;
		cin >> word;
		num_keys += forest.CountKeys(word);
	}

	cout << num_keys << endl;
	forest.Print();
	return 0;
}
